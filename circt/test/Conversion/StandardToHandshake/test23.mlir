// NOTE: Assertions have been autogenerated by utils/update_mlir_test_checks.py
// RUN: circt-opt -create-dataflow %s | FileCheck %s
func @multi_cond(%arg0: index, %arg1: index, %arg2: index, %arg3: index) {
// CHECK:       module {

// CHECK-LABEL:   handshake.func @multi_cond(
// CHECK-SAME:                               %[[VAL_0:.*]]: index, %[[VAL_1:.*]]: index, %[[VAL_2:.*]]: index, %[[VAL_3:.*]]: index, %[[VAL_4:.*]]: none, ...) -> none {
// CHECK:           %[[VAL_5:.*]] = "handshake.merge"(%[[VAL_0]]) : (index) -> index
// CHECK:           %[[VAL_6:.*]]:2 = "handshake.fork"(%[[VAL_5]]) {control = false} : (index) -> (index, index)
// CHECK:           %[[VAL_7:.*]] = "handshake.merge"(%[[VAL_1]]) : (index) -> index
// CHECK:           %[[VAL_8:.*]] = "handshake.merge"(%[[VAL_2]]) : (index) -> index
// CHECK:           %[[VAL_9:.*]] = "handshake.merge"(%[[VAL_3]]) : (index) -> index
// CHECK:           %[[VAL_10:.*]]:8 = "handshake.fork"(%[[VAL_4]]) {control = true} : (none) -> (none, none, none, none, none, none, none, none)
// CHECK:           %[[VAL_11:.*]] = "handshake.constant"(%[[VAL_10]]#6) {value = 0 : index} : (none) -> index
// CHECK:           %[[VAL_12:.*]]:6 = "handshake.fork"(%[[VAL_11]]) {control = false} : (index) -> (index, index, index, index, index, index)
// CHECK:           %[[VAL_13:.*]] = "handshake.constant"(%[[VAL_10]]#5) {value = -1 : index} : (none) -> index
// CHECK:           %[[VAL_14:.*]] = muli %[[VAL_12]]#0, %[[VAL_13]] : index
// CHECK:           %[[VAL_15:.*]] = addi %[[VAL_14]], %[[VAL_6]]#1 : index
// CHECK:           %[[VAL_16:.*]] = "handshake.constant"(%[[VAL_10]]#4) {value = 1 : index} : (none) -> index
// CHECK:           %[[VAL_17:.*]] = addi %[[VAL_15]], %[[VAL_16]] : index
// CHECK:           %[[VAL_18:.*]] = cmpi "sge", %[[VAL_17]], %[[VAL_12]]#1 : index
// CHECK:           %[[VAL_19:.*]] = "handshake.constant"(%[[VAL_10]]#3) {value = -1 : index} : (none) -> index
// CHECK:           %[[VAL_20:.*]] = addi %[[VAL_6]]#0, %[[VAL_19]] : index
// CHECK:           %[[VAL_21:.*]] = cmpi "sge", %[[VAL_20]], %[[VAL_12]]#2 : index
// CHECK:           %[[VAL_22:.*]] = and %[[VAL_18]], %[[VAL_21]] : i1
// CHECK:           %[[VAL_23:.*]] = "handshake.constant"(%[[VAL_10]]#2) {value = -1 : index} : (none) -> index
// CHECK:           %[[VAL_24:.*]] = addi %[[VAL_7]], %[[VAL_23]] : index
// CHECK:           %[[VAL_25:.*]] = cmpi "sge", %[[VAL_24]], %[[VAL_12]]#3 : index
// CHECK:           %[[VAL_26:.*]] = and %[[VAL_22]], %[[VAL_25]] : i1
// CHECK:           %[[VAL_27:.*]] = "handshake.constant"(%[[VAL_10]]#1) {value = -1 : index} : (none) -> index
// CHECK:           %[[VAL_28:.*]] = addi %[[VAL_8]], %[[VAL_27]] : index
// CHECK:           %[[VAL_29:.*]] = cmpi "sge", %[[VAL_28]], %[[VAL_12]]#4 : index
// CHECK:           %[[VAL_30:.*]] = and %[[VAL_26]], %[[VAL_29]] : i1
// CHECK:           %[[VAL_31:.*]] = "handshake.constant"(%[[VAL_10]]#0) {value = -42 : index} : (none) -> index
// CHECK:           %[[VAL_32:.*]] = addi %[[VAL_9]], %[[VAL_31]] : index
// CHECK:           %[[VAL_33:.*]] = cmpi "eq", %[[VAL_32]], %[[VAL_12]]#5 : index
// CHECK:           %[[VAL_34:.*]] = and %[[VAL_30]], %[[VAL_33]] : i1
// CHECK:           %[[VAL_35:.*]], %[[VAL_36:.*]] = "handshake.conditional_branch"(%[[VAL_34]], %[[VAL_10]]#7) {control = true} : (i1, none) -> (none, none)
// CHECK:           %[[VAL_37:.*]]:2 = "handshake.control_merge"(%[[VAL_35]]) {control = true} : (none) -> (none, index)
// CHECK:           "handshake.sink"(%[[VAL_37]]#1) : (index) -> ()
// CHECK:           %[[VAL_38:.*]] = "handshake.branch"(%[[VAL_37]]#0) {control = true} : (none) -> none
// CHECK:           %[[VAL_39:.*]]:2 = "handshake.control_merge"(%[[VAL_36]]) {control = true} : (none) -> (none, index)
// CHECK:           "handshake.sink"(%[[VAL_39]]#1) : (index) -> ()
// CHECK:           %[[VAL_40:.*]] = "handshake.branch"(%[[VAL_39]]#0) {control = true} : (none) -> none
// CHECK:           %[[VAL_41:.*]]:2 = "handshake.control_merge"(%[[VAL_40]], %[[VAL_38]]) {control = true} : (none, none) -> (none, index)
// CHECK:           "handshake.sink"(%[[VAL_41]]#1) : (index) -> ()
// CHECK:           handshake.return %[[VAL_41]]#0 : none
// CHECK:         }
// CHECK:       }

    %c0 = constant 0 : index
    %c-1 = constant -1 : index
    %1 = muli %c0, %c-1 : index
    %2 = addi %1, %arg0 : index
    %c1 = constant 1 : index
    %3 = addi %2, %c1 : index
    %4 = cmpi "sge", %3, %c0 : index
    %c-1_0 = constant -1 : index
    %5 = addi %arg0, %c-1_0 : index
    %6 = cmpi "sge", %5, %c0 : index
    %7 = and %4, %6 : i1
    %c-1_1 = constant -1 : index
    %8 = addi %arg1, %c-1_1 : index
    %9 = cmpi "sge", %8, %c0 : index
    %10 = and %7, %9 : i1
    %c-1_2 = constant -1 : index
    %11 = addi %arg2, %c-1_2 : index
    %12 = cmpi "sge", %11, %c0 : index
    %13 = and %10, %12 : i1
    %c-42 = constant -42 : index
    %14 = addi %arg3, %c-42 : index
    %15 = cmpi "eq", %14, %c0 : index
    %16 = and %13, %15 : i1
    cond_br %16, ^bb1, ^bb2
  ^bb1: // pred: ^bb0
    br ^bb3
  ^bb2: // pred: ^bb0
    br ^bb3
  ^bb3: // 2 preds: ^bb1, ^bb2
    return
  }
