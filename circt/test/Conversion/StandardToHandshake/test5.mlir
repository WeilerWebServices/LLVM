// NOTE: Assertions have been autogenerated by utils/update_mlir_test_checks.py
// RUN: circt-opt -create-dataflow %s | FileCheck %s
func @dfs_block_order() -> (i32) {
// CHECK:       module {

// CHECK-LABEL:   handshake.func @dfs_block_order(
// CHECK-SAME:                                    %[[VAL_0:.*]]: none, ...) -> (i32, none) {
// CHECK:           %[[VAL_1:.*]]:2 = "handshake.fork"(%[[VAL_0]]) {control = true} : (none) -> (none, none)
// CHECK:           %[[VAL_2:.*]] = "handshake.constant"(%[[VAL_1]]#0) {value = 42 : i32} : (none) -> i32
// CHECK:           %[[VAL_3:.*]] = "handshake.branch"(%[[VAL_1]]#1) {control = true} : (none) -> none
// CHECK:           %[[VAL_4:.*]] = "handshake.branch"(%[[VAL_2]]) {control = false} : (i32) -> i32
// CHECK:           %[[VAL_5:.*]] = "handshake.merge"(%[[VAL_6:.*]]) : (i32) -> i32
// CHECK:           %[[VAL_7:.*]] = "handshake.merge"(%[[VAL_8:.*]]) : (i32) -> i32
// CHECK:           %[[VAL_9:.*]]:2 = "handshake.control_merge"(%[[VAL_10:.*]]) {control = true} : (none) -> (none, index)
// CHECK:           "handshake.sink"(%[[VAL_9]]#1) : (index) -> ()
// CHECK:           %[[VAL_11:.*]] = addi %[[VAL_5]], %[[VAL_7]] : i32
// CHECK:           %[[VAL_12:.*]] = "handshake.merge"(%[[VAL_4]]) : (i32) -> i32
// CHECK:           %[[VAL_13:.*]]:2 = "handshake.control_merge"(%[[VAL_3]]) {control = true} : (none) -> (none, index)
// CHECK:           %[[VAL_14:.*]]:2 = "handshake.fork"(%[[VAL_13]]#0) {control = true} : (none) -> (none, none)
// CHECK:           "handshake.sink"(%[[VAL_13]]#1) : (index) -> ()
// CHECK:           %[[VAL_15:.*]] = "handshake.constant"(%[[VAL_14]]#0) {value = 55 : i32} : (none) -> i32
// CHECK:           %[[VAL_6]] = "handshake.branch"(%[[VAL_12]]) {control = false} : (i32) -> i32
// CHECK:           %[[VAL_10]] = "handshake.branch"(%[[VAL_14]]#1) {control = true} : (none) -> none
// CHECK:           %[[VAL_8]] = "handshake.branch"(%[[VAL_15]]) {control = false} : (i32) -> i32
// CHECK:           handshake.return %[[VAL_11]], %[[VAL_9]]#0 : i32, none
// CHECK:         }
// CHECK:       }

  %0 = constant 42 : i32
  br ^bb2
^bb1:
  %2 = addi %0, %1 : i32
  return %2 : i32
^bb2:
  %1 = constant 55 : i32
  br ^bb1
}
