// NOTE: Assertions have been autogenerated by utils/update_mlir_test_checks.py
// RUN: circt-opt -create-dataflow %s | FileCheck %s
func @ops(f32, f32, i32, i32) -> (f32, i32) {
// CHECK:       module {

// CHECK-LABEL:   handshake.func @ops(
// CHECK-SAME:                        %[[VAL_0:.*]]: f32, %[[VAL_1:.*]]: f32, %[[VAL_2:.*]]: i32, %[[VAL_3:.*]]: i32, %[[VAL_4:.*]]: none, ...) -> (f32, i32, none) {
// CHECK:           %[[VAL_5:.*]] = "handshake.merge"(%[[VAL_0]]) : (f32) -> f32
// CHECK:           %[[VAL_6:.*]] = "handshake.merge"(%[[VAL_1]]) : (f32) -> f32
// CHECK:           %[[VAL_7:.*]]:3 = "handshake.fork"(%[[VAL_6]]) {control = false} : (f32) -> (f32, f32, f32)
// CHECK:           %[[VAL_8:.*]] = "handshake.merge"(%[[VAL_2]]) : (i32) -> i32
// CHECK:           %[[VAL_9:.*]]:9 = "handshake.fork"(%[[VAL_8]]) {control = false} : (i32) -> (i32, i32, i32, i32, i32, i32, i32, i32, i32)
// CHECK:           %[[VAL_10:.*]] = "handshake.merge"(%[[VAL_3]]) : (i32) -> i32
// CHECK:           %[[VAL_11:.*]]:8 = "handshake.fork"(%[[VAL_10]]) {control = false} : (i32) -> (i32, i32, i32, i32, i32, i32, i32, i32)
// CHECK:           %[[VAL_12:.*]] = subf %[[VAL_5]], %[[VAL_7]]#2 : f32
// CHECK:           %[[VAL_13:.*]]:3 = "handshake.fork"(%[[VAL_12]]) {control = false} : (f32) -> (f32, f32, f32)
// CHECK:           %[[VAL_14:.*]] = subi %[[VAL_9]]#8, %[[VAL_11]]#7 : i32
// CHECK:           %[[VAL_15:.*]]:2 = "handshake.fork"(%[[VAL_14]]) {control = false} : (i32) -> (i32, i32)
// CHECK:           %[[VAL_16:.*]] = cmpi "slt", %[[VAL_9]]#7, %[[VAL_15]]#1 : i32
// CHECK:           %[[VAL_17:.*]] = subi %[[VAL_9]]#6, %[[VAL_11]]#6 : i32
// CHECK:           %[[VAL_18:.*]]:2 = "handshake.fork"(%[[VAL_17]]) {control = false} : (i32) -> (i32, i32)
// CHECK:           %[[VAL_19:.*]] = addi %[[VAL_15]]#0, %[[VAL_18]]#1 : i32
// CHECK:           "handshake.sink"(%[[VAL_19]]) : (i32) -> ()
// CHECK:           %[[VAL_20:.*]] = addi %[[VAL_9]]#5, %[[VAL_11]]#5 : i32
// CHECK:           "handshake.sink"(%[[VAL_20]]) : (i32) -> ()
// CHECK:           %[[VAL_21:.*]] = remi_unsigned %[[VAL_9]]#4, %[[VAL_11]]#4 : i32
// CHECK:           "handshake.sink"(%[[VAL_21]]) : (i32) -> ()
// CHECK:           %[[VAL_22:.*]] = select %[[VAL_16]], %[[VAL_9]]#3, %[[VAL_11]]#3 : i32
// CHECK:           "handshake.sink"(%[[VAL_22]]) : (i32) -> ()
// CHECK:           %[[VAL_23:.*]] = divf %[[VAL_13]]#2, %[[VAL_7]]#1 : f32
// CHECK:           "handshake.sink"(%[[VAL_23]]) : (f32) -> ()
// CHECK:           %[[VAL_24:.*]] = remf %[[VAL_13]]#1, %[[VAL_7]]#0 : f32
// CHECK:           "handshake.sink"(%[[VAL_24]]) : (f32) -> ()
// CHECK:           %[[VAL_25:.*]] = and %[[VAL_9]]#2, %[[VAL_11]]#2 : i32
// CHECK:           "handshake.sink"(%[[VAL_25]]) : (i32) -> ()
// CHECK:           %[[VAL_26:.*]] = or %[[VAL_9]]#1, %[[VAL_11]]#1 : i32
// CHECK:           "handshake.sink"(%[[VAL_26]]) : (i32) -> ()
// CHECK:           %[[VAL_27:.*]] = xor %[[VAL_9]]#0, %[[VAL_11]]#0 : i32
// CHECK:           "handshake.sink"(%[[VAL_27]]) : (i32) -> ()
// CHECK:           handshake.return %[[VAL_13]]#0, %[[VAL_18]]#0, %[[VAL_4]] : f32, i32, none
// CHECK:         }
// CHECK:       }

^bb0(%arg0: f32, %arg1: f32, %arg2: i32, %arg3: i32):
  %0 = subf %arg0, %arg1: f32
  %1 = subi %arg2, %arg3: i32
  %2 = cmpi "slt", %arg2, %1 : i32
  %4 = subi %arg2, %arg3 : i32
  %5 = addi %1, %4 : i32
  %6 = addi %arg2, %arg3 : i32
  %7 = remi_unsigned %arg2, %arg3 : i32
  %8 = select %2, %arg2, %arg3 : i32
  %9 = divf %0, %arg1 : f32
  %10 = remf %0, %arg1 : f32
  %11 = and %arg2, %arg3 : i32
  %12 = or %arg2, %arg3 : i32
  %13 = xor %arg2, %arg3 : i32
  return %0, %4 : f32, i32
}
